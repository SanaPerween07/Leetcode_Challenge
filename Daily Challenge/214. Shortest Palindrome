class Solution {
    public String shortestPalindrome(String s) {
        if (s == null || s.length() <= 1) {
            return s;
        }

        String rev_s = new StringBuilder(s).reverse().toString();
        String combined = s + "#" + rev_s;

        // Build the prefix table for the combined string
        int[] lps = buildKMPTable(combined);

        // Find the length of the longest palindrome prefix
        int longestPalindromePrefixLength = lps[combined.length() - 1];

        // Add the reverse of the remaining substring to the front of the original string
        String suffixToAdd = rev_s.substring(0, s.length() - longestPalindromePrefixLength);

        return suffixToAdd + s;
    }

    // Function to build the KMP prefix table
    private int[] buildKMPTable(String str) {
        int[] lps = new int[str.length()];
        int length = 0;
        int i = 1;

        while (i < str.length()) {
            if (str.charAt(i) == str.charAt(length)) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
}
