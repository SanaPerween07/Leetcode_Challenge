import java.util.HashMap;

class Solution {
    public int findTheLongestSubstring(String s) {
        // Map to store the first occurrence of each bitmask
        HashMap<Integer, Integer> map = new HashMap<>();
        // Initialize bitmask to 0 (all vowels even)
        int bitmask = 0;
        int maxLength = 0;
        
        // Initialize the map with bitmask 0 at index -1 (before the string starts)
        map.put(0, -1);
        
        // Iterate through the string
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            
            // Toggle the bitmask for vowels
            if (ch == 'a') {
                bitmask ^= 1 << 0; // toggle bit 0
            } else if (ch == 'e') {
                bitmask ^= 1 << 1; // toggle bit 1
            } else if (ch == 'i') {
                bitmask ^= 1 << 2; // toggle bit 2
            } else if (ch == 'o') {
                bitmask ^= 1 << 3; // toggle bit 3
            } else if (ch == 'u') {
                bitmask ^= 1 << 4; // toggle bit 4
            }
            
            // Check if the current bitmask has been seen before
            if (map.containsKey(bitmask)) {
                // Calculate the length of the substring
                maxLength = Math.max(maxLength, i - map.get(bitmask));
            } else {
                // Store the first occurrence of this bitmask
                map.put(bitmask, i);
            }
        }
        
        return maxLength;
    }
}
